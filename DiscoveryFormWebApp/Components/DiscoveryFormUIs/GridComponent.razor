@page "/GridComponent"

<h3 style="text-align:center">Discovery Forms</h3>
<br />
<TelerikGrid Data=@DiscoveryFormsData
    EditMode="@GridEditMode.Inline" 
    Pageable="true" 
    Height="100%"
    OnAdd="@AddHandler"
    OnUpdate="@UpdateHandler"
    OnEdit="@EditHandler" 
    OnDelete="@DeleteHandler" 
    OnCreate="@CreateHandler" 
    OnCancel="@CancelHandler">
    <GridToolBar>
        <GridCommandButton Command="Add" Icon="plus" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">Add Record</GridCommandButton>
    </GridToolBar>
    <GridColumns>
        <GridColumn Field=@nameof(DiscoveryForm.UniqueDiscoveryFormId) Visible="false" />
        <GridColumn Field=@nameof(DiscoveryForm.Title) Title="Title" Width="150px"></GridColumn>
        <GridColumn Field=@nameof(DiscoveryForm.Description) Title="Description" Width="150px"></GridColumn>
        <GridColumn Field=@nameof(DiscoveryForm.Category) Title="Category" Width="150px"></GridColumn>
        <GridColumn Field=@nameof(DiscoveryForm.VisibilityStatus) Title="Visibility Status" Width="250px">
            <EditorTemplate>
                @{
                    var item = (DiscoveryForm)context;

                    <TelerikDropDownList Data="@VisibilityStatausDDL" 
                        DefaultText="Select Visibility"
                        @bind-Value="@item.VisibilityStatus"
                        TextField="Text"
                        ValueField="Value"
                        Width="100%">
                        <DropDownListSettings>
                            <DropDownListPopupSettings Height="auto" />
                        </DropDownListSettings>
                    </TelerikDropDownList>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(DiscoveryForm.ApprovalStatus) Title="Approval Status" Width="250px">
            <EditorTemplate>
                @{
                    var item = (DiscoveryForm)context;

                    <TelerikDropDownList Data="@ApprovalStatusDDL"
                                         DefaultText="Select Approval"
                                         @bind-Value="@item.ApprovalStatus"
                                         TextField="Text"
                                         ValueField="Value"
                                         Width="100%">
                        <DropDownListSettings>
                            <DropDownListPopupSettings Height="auto" />
                        </DropDownListSettings>
                    </TelerikDropDownList>
                }
            </EditorTemplate>
        </GridColumn>
        <GridColumn Field=@nameof(DiscoveryForm.Notes) Title="Notes" Width="200px">
            <EditorTemplate> <!-- on click add/edit -->
                @{
                    var item = (DiscoveryForm)context;

                    if (item.Notes == null)
                    {
                        <TelerikButton OnClick="addNoteModal.openAddNoteModal" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" Icon="inbox"></TelerikButton>

                    }
                    else if (item.UniqueDiscoveryFormId > 0)
                    {
                        <TelerikButton OnClick="@((args) => { addNoteModal.openUpdateNoteModal(item.UniqueDiscoveryFormId); })" ThemeColor="@ThemeConstants.Button.ThemeColor.Success" Icon="inbox"></TelerikButton>
                    }
                }
            </EditorTemplate>
            <Template> <!-- what is returned in the grid-->
                @{
                    var item = (DiscoveryForm)context;

                    if(item.Notes == null)
                    {
                        <TelerikButton OnClick="addNoteModal.openAddNoteModal" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" Icon="inbox"></TelerikButton>

                    }
                    else if(item.UniqueDiscoveryFormId > 0)
                    {
                        //<TelerikButton OnClick="@((args) => { addNoteModal.openUpdateNoteModal(item.Notes); })" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary" Icon="inbox"></TelerikButton>
                        <TelerikButton OnClick="@((args) => { addNoteModal.openUpdateNoteModal(item.UniqueDiscoveryFormId); })" ThemeColor="@ThemeConstants.Button.ThemeColor.Success" Icon="inbox"></TelerikButton>
                    }
                }
            </Template>
        </GridColumn>
        <GridCommandColumn Title="Actions" Width="100px">
            <GridCommandButton Command="Save" Icon="save" ShowInEdit="true" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary"></GridCommandButton>
            <GridCommandButton Command="Edit" Icon="edit" ThemeColor="@ThemeConstants.Button.ThemeColor.Success"></GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete" ThemeColor="@ThemeConstants.Button.ThemeColor.Error"></GridCommandButton>
            <GridCommandButton Command="Cancel" Icon="cancel" ShowInEdit="true" ThemeColor="@ThemeConstants.Button.ThemeColor.Warning"></GridCommandButton>
        </GridCommandColumn>
    </GridColumns>
</TelerikGrid>
<AddNoteModalComponent @ref="addNoteModal" ></AddNoteModalComponent>

@code {
    public int UniqueDiscoveryFormId { get; set; }

    public DiscoveryForm? discoveryForm = new();

    public List<DiscoveryForm>? DiscoveryFormsData { get; set; }
    public List<SelectListItem>? ApprovalStatusDDL  = new List<SelectListItem>();
    public List<SelectListItem>? VisibilityStatausDDL = new List<SelectListItem>();

    public AddNoteModalComponent? addNoteModal { get; set; }

    public string? noteValueToSave { get; set; }

    async Task GetGridData()
    {
        DiscoveryFormsData = _discoveryFormService.GetListOfDiscoveryForms();
    }

    protected override async Task OnInitializedAsync()
    {
        VisibilityStatausDDL = _dropDownData.VisibilityStatusOption;
        ApprovalStatusDDL = _dropDownData.ApprovalStatusOptions;
        await GetGridData();
    }

    async Task AddHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;

        UniqueDiscoveryFormId = item.UniqueDiscoveryFormId;
    }

    async Task CreateHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;

        // get state variable for record
        item.Notes = _stateService.NoteValue;

        _discoveryFormService.AddDiscoveryForm(item);

        // update the local model data with the service data
        await GetGridData();
    }

    async Task CancelHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;
        discoveryForm = new();
    }

    void EditHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;

        var recordToEdit = _discoveryFormService.GetDiscoveryFormData(item.UniqueDiscoveryFormId);

        //var Id = item.UniqueDiscoveryFormId;
        //if(Id > 0)
        //{
        //    item.Notes = _stateService.NoteValue;
        //}
    }

    async Task UpdateHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;

        // get state variable for record
        item.Notes = _stateService.NoteValue;

        _discoveryFormService.UpdateDiscoveryFormDetails(item);

        // update the local model data with the service data
        await GetGridData();

    }

    async Task DeleteHandler(GridCommandEventArgs args)
    {
        DiscoveryForm item = (DiscoveryForm)args.Item;

        _discoveryFormService.DeleteDiscoveryForm(item.UniqueDiscoveryFormId);
        // update the local view-model data with the service data
        await GetGridData();
    }

    // this handler does not even have to do anything, but it must be called so it re-renders this component
    protected void UpdateThisGridComponent()
    {
        discoveryForm.Notes = addNoteModal.discoveryForm.Notes;

        // set state variable for record
        _stateService.SetNoteValue(discoveryForm.Notes);

        //var gridState = GridRef?.GetState();
        //GridRef.SetStateAsync(gridState);

    }

}
